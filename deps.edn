;; deps.edn

{:paths
 ["src"]

 :deps
 {org.clojure/clojure
  {:mvn/version "1.12.0"}
  ;; A library for building Docker and OCI containers.
  com.google.cloud.tools/jib-core
  {:mvn/version "0.27.2"}
  ;; Support classes for jib container build tool.
  com.google.cloud.tools/jib-build-plan
  {:mvn/version "0.4.0"}
  ;; Micro-assertions framework for Clojure/Script.
  com.taoensso/truss
  {:mvn/version "1.12.0"}}

 :aliases
 {:test/env
  {}

  ;; Include the kondo lint tool.
  :lint/kondo
  {:replace-deps {clj-kondo/clj-kondo {:mvn/version "RELEASE"}}}

  ;; Lint the entire classpath to teach clj-kondo what libraries we are using. Collects
  ;; configuration files when available, linting in parallel:
  :lint/init
  {:main-opts ["-m" "clj-kondo.main"
               "--lint" "<classpath>"
               "--dependencies"
               "--parallel"
               "--copy-configs"]}

  ;; Run the linter to check source code. Supply the --lint argument to specify what is to be
  ;; linted.
  ;;
  ;; $ clojure -M:lint/kondo:lint/check --lint src/
  :lint/check
  {:main-opts ["-m" "clj-kondo.main" "--parallel"]}

  ;; TEST
  ;; > call with :watch? true to start file watcher and re-run tests on saved changes
  ;;
  ;; $ clojure -M:test/run

  :test/run
  {:extra-paths ["test"]
   :extra-deps {lambdaisland/kaocha
                {:mvn/version "1.91.1392"}}
   :main-opts ["-m" "kaocha.runner"]
   :exec-fn kaocha.runner/exec-fn
   :exec-args {:randomize? false
               :fail-fast? true}}

  ;; Include the style checker dependency.
  :style/task
  {:extra-deps
   {mvxcvi/cljstyle {:git/url "https://github.com/greglook/cljstyle.git"
                     :git/sha "9be5bb9ed678a1e73670a3df3ece08bb22362441"}}}

  ;; Report format issues for current project code:
  :style/check
  {:main-opts ["--main" "cljstyle.main" "check"]}

  ;; Fix format issues for current project code:
  :style/fix
  {:main-opts ["--main" "cljstyle.main" "fix"]}

  ;; Invoke build tooling to run commands from build.clj:
  :build/task
  {:replace-paths ["."]
   :replace-deps {io.github.clojure/tools.build
                  {:git/tag "v0.10.5"
                   :git/sha "2a21b7a"}}
   :ns-default build}

  ;; Run a development REPL:
  ;; $ clojure -M:project/repl
  ;;
  ;; NB: we don't include cider/cider-nrepl here, instead rely on CIDER's auto-dependency injection
  ;; to inject the version that it requires. Auto-injection can be disabled if that causes issues
  ;; however.
  :project/repl
  {:extra-paths ["dev" "test"]
   :extra-deps {;; A smarter way to reload Clojure code.
                io.github.tonsky/clj-reload
                {:mvn/version "0.7.1"}
                ;; A Clojure network REPL.
                nrepl/nrepl
                {:mvn/version "1.3.0"}
                ;; Binding/provider for NOP (discards all logging messages).
                org.slf4j/slf4j-nop
                {:mvn/version "2.0.16"}}
   :main-opts
   ["--eval" "(apply require clojure.main/repl-requires)"
    "--main" "nrepl.cmdline"
    "--middleware" "[cider.nrepl/cider-middleware,portal.nrepl/wrap-portal]"
    "--interactive"]}

  }}
